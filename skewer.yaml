title: Sharing a PostgreSQL database running on an internal namespace
subtitle: |
  This tutorial demonstrates how to share a PostgreSQL database running on an internal namespace, without a Skupper site, across Kubernetes clusters that are located in different cloud providers.
overview: |
  In this tutorial, you will create a Virtual Application Nework (VAN) that enables communications across the west and east clusters.
  You will then deploy a PostgreSQL database instance to the **east-internal** namespace of a private cluster.
  This namespace is not connected to the Virtual Application Network so we use an **_Attached Connector_** to expose it into the VAN
  through the **east** namespace.
  This will enable clients on both private and public clusters attached to the Virtual Application Nework to transparently access the database
  without the need for additional networking setup (e.g. no vpn or sdn required).
prerequisites: |
  @default@

  The basis for the demonstration is to depict the operation of a PostgreSQL database in a private cluster, on a namespace that is not connected
  to the Virtual Application Network but allows the **east** namespace to expose the pods that are running on the **east-internal** namespace.
  With that we provide access to the database from clients resident on any cluster connected to the VAN.
  
  As an example, the cluster deployment might be comprised of:

  * A private cloud cluster running on your local machine (for **east** and **east-internal** namespaces)
  * A public cloud cluster running in a public cloud provider (for **west** namespace)

  While the detailed steps are not included here, this demonstration can alternatively be performed with three separate namespaces on a single cluster.
sites:
  west:
    title: West namespace on public cluster
    platform: kubernetes
    namespace: west
    env:
      KUBECONFIG: $PWD/kubeconfigs/west.config
  east:
    title: East namespace on private cluster
    platform: kubernetes
    namespace: east
    env:
      KUBECONFIG: $PWD/kubeconfigs/east.config
  east-internal:
    title: East internal namespace on private cluster
    platform: kubernetes
    namespace: east-internal
    env:
      KUBECONFIG: $PWD/kubeconfigs/east-internal.config
steps:
  - standard: platform/access_your_kubernetes_clusters
  - standard: platform/install_skupper_on_your_kubernetes_clusters
  - standard: platform/create_your_kubernetes_namespaces
  - title: Set up the demo
    preamble: |
      On your local machine, make a directory for this tutorial and clone the example repo:
    commands:
      west:
        - run: |
            cd ~/
            mkdir pg-demo
            cd pg-demo
            git clone https://github.com/fgiorgetti/skupper-example-postgresql-attached-connector.git
  - title: Create your sites
    preamble: |
      A Skupper _Site_ is a location where your application workloads
      are running. Sites are linked together to form a network for your
      application.

      Use the `kubectl apply` command to declaratively create sites in the kubernetes
      namespaces. This deploys the Skupper router. Then use `kubectl get site` to see
      the outcome.

        **Note:** If you are using Minikube, you need to [start minikube
        tunnel][minikube-tunnel] before you configure skupper.

        [minikube-tunnel]: https://skupper.io/start/minikube.html#running-minikube-tunnel

      The **west** site definition sets `linkAccess: default`, because the **east** site will establish a Skupper link to **west**.
      This extra definition tells that the **west** site accepts incoming Skupper links from other sites using the default ingress
      type for the target cluster (_route_ when using OpenShift or _loadbalancer_ otherwise).
    commands:
      "west":
        - run: kubectl apply -f ~/pg-demo/skupper-example-postgresql-attached-connector/kubernetes/west/site.yaml
      "east":
        - run: kubectl apply -f ~/pg-demo/skupper-example-postgresql-attached-connector/kubernetes/east/site.yaml
  - title: Link your sites
    preamble: |
      A Skupper _link_ is a channel for communication between two sites.
      Links serve as a transport for application connections and
      requests.

      Creating an AccessToken requires the creation of an AccessGrant first,
      on the target namespace (**west**), then we can consume the AccessGrant's status
      to write an AccessToken and apply if into the target cluster (**east**) using `kubectl apply`.

      **Note:** The link token is truly a *secret*.  Anyone who has the
      token can link to your site.  Make sure that only those you trust
      have access to it.
    commands:
      "west":
        - run: kubectl wait --for=condition=ready site/west --timeout 300s
        - run: kubectl apply -f ~/pg-demo/skupper-example-postgresql-attached-connector/kubernetes/west/accessgrant.yaml
        - run: kubectl wait --for=condition=ready accessgrant/west-grant --timeout 300s
        - run: |
            kubectl get accessgrant west-grant -o go-template-file=skupper-example-postgresql-attached-connector/kubernetes/token.template > ~/west.token
      "east":
        - run: kubectl apply -f ~/west.token
          output: |
            accesstoken.skupper.io/token-west-grant created
    postamble: |
      If your terminal sessions are on different machines, you may need
      to use `scp` or a similar tool to transfer the token securely.  By
      default, tokens expire after a single use or 15 minutes after
      being issued.
  - title: Deploy the PostgreSQL service
    preamble: |
      After creating the application router network, deploy the PostgreSQL service.
      The **east-internal** namespace on the private cluster will be used to deploy the PostgreSQL server.
      The **west** (public cluster) and the **east** (private cluster) namespaces will be used to enable client
      communications to the server running on the **east-internal** namespace of the private cluster.
    commands:
      east-internal:
        - run: |
            kubectl apply -f ~/pg-demo/skupper-example-postgresql-attached-connector/kubernetes/east-internal/deployment-postgresql-svc.yaml
          output: |
            secret/postgresql created
            deployment.apps/postgresql created
        - await_resource: deployment/postgresql
          apply: test
  - title: Expose the PostgreSQL on the Virtual Application Network
    preamble: |
      Now that the PostgreSQL is running in the **east-internal** namespace of the private cluster, we need to expose it into
      your Virtual Application Network (VAN).

      Remember that the **east-internal** namespace is not connected to the VAN, so workloads running there cannot be exposed by other namespaces.

      Skupper V2 allows exposing resources running on separate namespaces, as long as the target namespace (where the workloads are
      running) authorize specific namespaces to bind its pods by defining an **_AttachedConnector_**.

      The **_AttachedConnector_** must be defined at the namespace where the target workloads are running and it must specify:
      
      * The _selector_
      * The target _port_ and
      * The _siteNamespace_

      In this case, the _siteNamespace_ must be set to **east** which is the namespace in the private cluster which is connected to a VAN.

      The **east** site must then define an **_AttachedConnectorBinding_** resource that has:

      * The same name of the **_AttachedConnector_** defined on the **east-internal** namespace
      * A _routingKey_ to be used by participant VAN sites to access the database
      * The _connectorNamespace_ field set to **east-internal**

      If all the settings above match, the **East** site is allowed to expose the PostgreSQL pods running on the **east-internal** namespace.
    commands:
      east-internal:
        - run: kubectl apply -f ~/pg-demo/skupper-example-postgresql-attached-connector/kubernetes/east-internal/attached-connector-east.yaml
          output: |
            attachedconnector.skupper.io/postgresql-east created
      east:
        - run: kubectl apply -f ~/pg-demo/skupper-example-postgresql-attached-connector/kubernetes/east/attached-connector-binding.yaml
          output: |
            attachedconnectorbinding.skupper.io/postgresql-east created
  - title: Making the PostgreSQL database accessible to the west and east sites
    preamble: |
      In order to make the PostgreSQL database accessible to the **west** and **east** sites, we need to define a `Listener`
      on each site, which will produce a Kubernetes service on each cluster, connecting them with the database running on **east-internal**
      namespace of the private cluster.
    commands:
      west:
        - run: kubectl apply -f ~/pg-demo/skupper-example-postgresql-attached-connector/kubernetes/west/listener.yaml
          output: |
            listener.skupper.io/postgresql created
        - run: kubectl wait --for=condition=ready listener/postgresql --timeout 300s
      east:
        - run: kubectl apply -f ~/pg-demo/skupper-example-postgresql-attached-connector/kubernetes/east/listener.yaml
          output: |
            listener.skupper.io/postgresql created
        - run: kubectl wait --for=condition=ready listener/postgresql --timeout 300s
  - title: Create pod with PostgreSQL client utilities
    preamble: |
      Create a pod named `pg-shell` on the west and east sites. This pod will be used to
      communicate with the PostgreSQL database from **west** (public cluster) and **east** (private cluter) namespaces.
    commands:
      west:
        - run: |
            kubectl run pg-shell --image quay.io/skupper/simple-pg \
            --env="PGUSER=postgres" \
            --env="PGPASSWORD=skupper" \
            --env="PGHOST=postgresql" \
            --command sleep infinity
          output: pod/pg-shell created
        - run: kubectl wait --for condition=ready --timeout 300s pod/pg-shell
          apply: test
      east:
        - run: |
            kubectl run pg-shell --image quay.io/skupper/simple-pg \
            --env="PGUSER=postgres" \
            --env="PGPASSWORD=skupper" \
            --env="PGHOST=postgresql" \
            --command sleep infinity
          output: pod/pg-shell created
        - run: kubectl wait --for condition=ready --timeout 300s pod/pg-shell
          apply: test
  - title: Create a database, a table and insert values
    preamble: |
      Now that we can access the PostgreSQL database from both west and east sites, let's create a database called **markets**,
      then create a table named **product** and load it with some data.
    commands:
      west:
        - run: |
            kubectl exec pg-shell -- createdb -e markets
            kubectl exec -i pg-shell -- psql -d markets < ~/pg-demo/skupper-example-postgresql-attached-connector/sql/table.sql
            kubectl exec -i pg-shell -- psql -d markets < ~/pg-demo/skupper-example-postgresql-attached-connector/sql/data.sql
          output: |
            SELECT pg_catalog.set_config('search_path', '', false);
            CREATE DATABASE markets;
            CREATE TABLE
            INSERT 0 1
            INSERT 0 1
            INSERT 0 1
            INSERT 0 1
  - title: Access the product table from any site
    preamble: |
      Now that data has been added, try to read them from both the **west** and **east** sites.
    commands:
      west:
        - run: echo "SELECT * FROM product;" | kubectl exec -i pg-shell -- psql -d markets
      east:
        - run: echo "SELECT * FROM product;" | kubectl exec -i pg-shell -- psql -d markets
  - title: Cleaning up
    name: cleaning_up
    preamble: |
      Restore your cluster environment by returning the resources created in the demonstration. On each cluster, delete the 
      demo resources and the virtual application Network.
    numbered: false
    commands:
      west:
        - run: kubectl delete pod pg-shell --now
        - run: kubectl delete -f ~/pg-demo/skupper-example-postgresql-attached-connector/kubernetes/west/
      east:
        - run: kubectl delete pod pg-shell --now
        - run: kubectl delete -f ~/west.token -f ~/pg-demo/skupper-example-postgresql-attached-connector/kubernetes/east/
      east-internal:
        - run: kubectl delete -f ~/pg-demo/skupper-example-postgresql-attached-connector/kubernetes/east-internal/
summary: |
  Through this example, we demonstrated how Skupper enables secure access to a PostgreSQL database hosted in a
  private Kubernetes cluster and on a namespace that is not connected to the Virtual Application Network, without exposing it to the public internet.

  By deploying Skupper in each namespace, we established a **Virtual Application Network** (VAN), which allowed
  the PostgreSQL service to be securely shared across clusters.
  
  The **AttachedConnector** and the **AttachedConnectorBinding** provided by Skupper, allows you to provide a granular definition on which
  workloads can be exposed by Skupper sites running on different namespaces. Namespaces that are not explicitly allowed through **AttachedConnectors**
  cannot bind pods and cannot expose them into the VAN.

  It is important to emphasize that the database was made available exclusively within the VAN in which the **east** namespace of the private cluster,
  is a member of. With that, applications in the **west** (public cluster) and **east** (private cluster) namespaces, are able to access it seamlessly,
  as if it were running locally in their own namespaces.

  This approach not only simplifies multi-cluster communication but also preserves strict network boundaries, eliminating the need for complex VPNs or
  firewall changes.
